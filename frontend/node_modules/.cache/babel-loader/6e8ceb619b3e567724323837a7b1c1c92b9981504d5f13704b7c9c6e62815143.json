{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\nconst API_URL = 'http://localhost:8000';\n\n// Axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\n\n// Axios interceptors\naxiosInstance.interceptors.request.use(function (config) {\n  var _config$TYPE, _config$TYPE2;\n  if ((_config$TYPE = config.TYPE) !== null && _config$TYPE !== void 0 && _config$TYPE.params) {\n    config.params = config.TYPE.params;\n  } else if ((_config$TYPE2 = config.TYPE) !== null && _config$TYPE2 !== void 0 && _config$TYPE2.query) {\n    config.url = `${config.url}/${config.TYPE.query}`;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(ProcessError(error));\n});\n\n// Response processing\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst ProcessError = error => {\n  if (error.response) {\n    console.error(\"ERROR IN RESPONSE:\", error.response);\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.error(\"ERROR IN REQUEST:\", error.request);\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    console.error(\"GENERAL ERROR:\", error.message);\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n\n// Dynamic API methods via axios\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: body,\n    responseType: value.responseType,\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentageCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentageCompleted);\n      }\n    }\n  });\n}\n\n// Adding fetch-based methods to the same API object\nAPI.userRegister = async userData => {\n  const response = await fetch('http://localhost:3000/api/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  return await response.json();\n};\nAPI.userLogin = async loginData => {\n  const response = await fetch('http://localhost:3000/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(loginData)\n  });\n  return await response.json();\n};\nAPI.memberLogin = async loginData => {\n  const response = await fetch('http://localhost:3000/api/memberlogin', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(loginData)\n  });\n  return await response.json();\n};\nAPI.employeeLogin = async loginData => {\n  const response = await fetch('http://localhost:3000/api/employeelogin', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(loginData)\n  });\n  return await response.json();\n};\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","_config$TYPE","_config$TYPE2","TYPE","params","query","url","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","data","isFailure","msg","code","console","isError","responseFailure","requestFailure","message","networkError","_c","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","responseType","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress","userRegister","userData","fetch","JSON","stringify","json","userLogin","loginData","memberLogin","employeeLogin","$RefreshReg$"],"sources":["/Users/user/Desktop/CodeRelix Internship Nov 2024/PulseFit/frontend/src/components/service/api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\n\nconst API_URL = 'http://localhost:8000';\n\n// Axios instance\nconst axiosInstance = axios.create({\n    baseURL: API_URL,\n    timeout: 10000, \n    headers: {\n        \"content-type\": \"application/json\"\n    }\n});\n\n// Axios interceptors\naxiosInstance.interceptors.request.use(\n    function(config) {\n        if (config.TYPE?.params) {\n            config.params = config.TYPE.params;\n        } else if (config.TYPE?.query) {\n            config.url = `${config.url}/${config.TYPE.query}`;\n        }\n        return config;\n    },\n    function(error) {\n        return Promise.reject(error);\n    }\n);\n\naxiosInstance.interceptors.response.use(\n    function(response) {\n        return processResponse(response);\n    },\n    function(error) {\n        return Promise.reject(ProcessError(error));\n    }\n);\n\n// Response processing\nconst processResponse = (response) => {\n    if (response?.status === 200) {\n        return { isSuccess: true, data: response.data };\n    } else {\n        return {\n            isFailure: true,\n            status: response?.status,\n            msg: response?.msg,\n            code: response?.code\n        };\n    }\n};\n\nconst ProcessError = (error) => {\n    if (error.response) {\n        console.error(\"ERROR IN RESPONSE:\", error.response);\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.responseFailure,\n            code: error.response.status\n        };\n    } else if (error.request) { \n        console.error(\"ERROR IN REQUEST:\", error.request);\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\n            code: \"\"\n        };\n    } else { \n        console.error(\"GENERAL ERROR:\", error.message);\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.networkError,\n            code: \"\"\n        };\n    }\n};\n\n// Dynamic API methods via axios\nconst API = {};\n\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\n        axiosInstance({\n            method: value.method,\n            url: value.url,\n            data: body,\n            responseType: value.responseType,\n            onUploadProgress: function (progressEvent) {\n                if (showUploadProgress) {\n                    let percentageCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    showUploadProgress(percentageCompleted);\n                }\n            },\n            onDownloadProgress: function (progressEvent) {\n                if (showDownloadProgress) {\n                    let percentageCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    showDownloadProgress(percentageCompleted);\n                }\n            }\n        });\n}\n\n// Adding fetch-based methods to the same API object\nAPI.userRegister = async (userData) => {\n    const response = await fetch('http://localhost:3000/api/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData),\n    });\n    return await response.json();\n};\n\nAPI.userLogin = async (loginData) => {\n    const response = await fetch('http://localhost:3000/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(loginData),\n    });\n    return await response.json();\n};\n\nAPI.memberLogin = async (loginData) => {\n    const response = await fetch('http://localhost:3000/api/memberlogin', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(loginData),\n    });\n    return await response.json();\n};\n\nAPI.employeeLogin = async (loginData) => {\n    const response = await fetch('http://localhost:3000/api/employeelogin', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(loginData),\n    });\n    return await response.json();\n};\n\nexport { API };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,yBAAyB,EAAEC,YAAY,QAAQ,qBAAqB;AAE7E,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,MAAMC,aAAa,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC/BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,UAASC,MAAM,EAAE;EAAA,IAAAC,YAAA,EAAAC,aAAA;EACb,KAAAD,YAAA,GAAID,MAAM,CAACG,IAAI,cAAAF,YAAA,eAAXA,YAAA,CAAaG,MAAM,EAAE;IACrBJ,MAAM,CAACI,MAAM,GAAGJ,MAAM,CAACG,IAAI,CAACC,MAAM;EACtC,CAAC,MAAM,KAAAF,aAAA,GAAIF,MAAM,CAACG,IAAI,cAAAD,aAAA,eAAXA,aAAA,CAAaG,KAAK,EAAE;IAC3BL,MAAM,CAACM,GAAG,GAAG,GAAGN,MAAM,CAACM,GAAG,IAAIN,MAAM,CAACG,IAAI,CAACE,KAAK,EAAE;EACrD;EACA,OAAOL,MAAM;AACjB,CAAC,EACD,UAASO,KAAK,EAAE;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAEDf,aAAa,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CACnC,UAASW,QAAQ,EAAE;EACf,OAAOC,eAAe,CAACD,QAAQ,CAAC;AACpC,CAAC,EACD,UAASH,KAAK,EAAE;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACG,YAAY,CAACL,KAAK,CAAC,CAAC;AAC9C,CACJ,CAAC;;AAED;AACA,MAAMI,eAAe,GAAID,QAAQ,IAAK;EAClC,IAAI,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,MAAK,GAAG,EAAE;IAC1B,OAAO;MAAEC,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAEL,QAAQ,CAACK;IAAK,CAAC;EACnD,CAAC,MAAM;IACH,OAAO;MACHC,SAAS,EAAE,IAAI;MACfH,MAAM,EAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM;MACxBI,GAAG,EAAEP,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEO,GAAG;MAClBC,IAAI,EAAER,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ;IACpB,CAAC;EACL;AACJ,CAAC;AAED,MAAMN,YAAY,GAAIL,KAAK,IAAK;EAC5B,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAChBS,OAAO,CAACZ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACG,QAAQ,CAAC;IACnD,OAAO;MACHU,OAAO,EAAE,IAAI;MACbH,GAAG,EAAE5B,yBAAyB,CAACgC,eAAe;MAC9CH,IAAI,EAAEX,KAAK,CAACG,QAAQ,CAACG;IACzB,CAAC;EACL,CAAC,MAAM,IAAIN,KAAK,CAACT,OAAO,EAAE;IACtBqB,OAAO,CAACZ,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACT,OAAO,CAAC;IACjD,OAAO;MACHsB,OAAO,EAAE,IAAI;MACbH,GAAG,EAAE5B,yBAAyB,CAACiC,cAAc;MAC7CJ,IAAI,EAAE;IACV,CAAC;EACL,CAAC,MAAM;IACHC,OAAO,CAACZ,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACgB,OAAO,CAAC;IAC9C,OAAO;MACHH,OAAO,EAAE,IAAI;MACbH,GAAG,EAAE5B,yBAAyB,CAACmC,YAAY;MAC3CN,IAAI,EAAE;IACV,CAAC;EACL;AACJ,CAAC;;AAED;AAAAO,EAAA,GAzBMb,YAAY;AA0BlB,MAAMc,GAAG,GAAG,CAAC,CAAC;AAEd,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACxC,YAAY,CAAC,EAAE;EACrDoC,GAAG,CAACC,GAAG,CAAC,GAAG,CAACI,IAAI,EAAEC,kBAAkB,EAAEC,oBAAoB,KACtDzC,aAAa,CAAC;IACV0C,MAAM,EAAEN,KAAK,CAACM,MAAM;IACpB5B,GAAG,EAAEsB,KAAK,CAACtB,GAAG;IACdS,IAAI,EAAEgB,IAAI;IACVI,YAAY,EAAEP,KAAK,CAACO,YAAY;IAChCC,gBAAgB,EAAE,SAAAA,CAAUC,aAAa,EAAE;MACvC,IAAIL,kBAAkB,EAAE;QACpB,IAAIM,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACxFV,kBAAkB,CAACM,mBAAmB,CAAC;MAC3C;IACJ,CAAC;IACDK,kBAAkB,EAAE,SAAAA,CAAUN,aAAa,EAAE;MACzC,IAAIJ,oBAAoB,EAAE;QACtB,IAAIK,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACxFT,oBAAoB,CAACK,mBAAmB,CAAC;MAC7C;IACJ;EACJ,CAAC,CAAC;AACV;;AAEA;AACAZ,GAAG,CAACkB,YAAY,GAAG,MAAOC,QAAQ,IAAK;EACnC,MAAMnC,QAAQ,GAAG,MAAMoC,KAAK,CAAC,oCAAoC,EAAE;IAC/DZ,MAAM,EAAE,MAAM;IACdtC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CmC,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAACH,QAAQ;EACjC,CAAC,CAAC;EACF,OAAO,MAAMnC,QAAQ,CAACuC,IAAI,CAAC,CAAC;AAChC,CAAC;AAEDvB,GAAG,CAACwB,SAAS,GAAG,MAAOC,SAAS,IAAK;EACjC,MAAMzC,QAAQ,GAAG,MAAMoC,KAAK,CAAC,iCAAiC,EAAE;IAC5DZ,MAAM,EAAE,MAAM;IACdtC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CmC,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAACG,SAAS;EAClC,CAAC,CAAC;EACF,OAAO,MAAMzC,QAAQ,CAACuC,IAAI,CAAC,CAAC;AAChC,CAAC;AAEDvB,GAAG,CAAC0B,WAAW,GAAG,MAAOD,SAAS,IAAK;EACnC,MAAMzC,QAAQ,GAAG,MAAMoC,KAAK,CAAC,uCAAuC,EAAE;IAClEZ,MAAM,EAAE,MAAM;IACdtC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CmC,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAACG,SAAS;EAClC,CAAC,CAAC;EACF,OAAO,MAAMzC,QAAQ,CAACuC,IAAI,CAAC,CAAC;AAChC,CAAC;AAEDvB,GAAG,CAAC2B,aAAa,GAAG,MAAOF,SAAS,IAAK;EACrC,MAAMzC,QAAQ,GAAG,MAAMoC,KAAK,CAAC,yCAAyC,EAAE;IACpEZ,MAAM,EAAE,MAAM;IACdtC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CmC,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAACG,SAAS;EAClC,CAAC,CAAC;EACF,OAAO,MAAMzC,QAAQ,CAACuC,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,SAASvB,GAAG;AAAG,IAAAD,EAAA;AAAA6B,YAAA,CAAA7B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}