{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/CodeRelix Internship Nov 2024/PulseFit/frontend/src/components/EmCalendar/EmCalendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaTrashAlt } from 'react-icons/fa'; // Import the trash icon\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\nimport './EmCalendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState({}); // Store events with date and time\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [newEvent, setNewEvent] = useState(\"\");\n  const [view, setView] = useState(\"month\"); // State to track the current view (month, week, agenda)\n  const [selectedSlot, setSelectedSlot] = useState(null); // For week view time slots\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const token = localStorage.getItem('token'); // Get token from localStorage\n      if (!token) {\n        console.log('No token found');\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:3000/eventsforemployees', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        console.log('API Response:', data); // Log the full response\n\n        if (data.status === 'SUCCESS') {\n          const formattedEvents = {};\n          data.events.forEach(event => {\n            const {\n              eventDate,\n              eventName\n            } = event;\n            const formattedDate = new Date(eventDate).toISOString().split('T')[0]; // 'YYYY-MM-DD'\n            formattedEvents[formattedDate] = [...(formattedEvents[formattedDate] || []), eventName];\n          });\n          console.log('Formatted Events:', formattedEvents); // Log the formatted events\n          setEvents(formattedEvents); // Store in state\n        } else {\n          console.log('API status is not SUCCESS:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n    fetchEvents();\n  }, []); // Runs once when component mounts\n\n  const getMonthName = monthIndex => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[monthIndex];\n  };\n  const daysInMonth = (month, year) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n\n  // Function to get days for the week view\n  const daysInWeek = startOfWeek => {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(startOfWeek);\n      day.setDate(startOfWeek.getDate() + i);\n      days.push(day);\n    }\n    return days;\n  };\n  const changeMonth = direction => {\n    const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1);\n    setCurrentDate(newDate);\n  };\n  const handleTodayClick = () => {\n    setCurrentDate(new Date()); // Reset to today's date\n    setSelectedDay(new Date().getDate()); // Set today's date as selected\n  };\n  const handleAddEvent1 = () => {\n    if (newEvent.trim() && selectedSlot) {\n      const eventKey = `${selectedSlot.date}-${selectedSlot.time}`; // Use both date and time\n      setEvents(prevEvents => ({\n        ...prevEvents,\n        [eventKey]: [...(prevEvents[eventKey] || []), newEvent] // Store events at the specific time slot\n      }));\n      setNewEvent(\"\"); // Clear input after adding event\n      setSelectedSlot(null); // Close the form\n    }\n  };\n  const handleAddEvent = async () => {\n    if (!selectedDay || !newEvent.trim()) {\n      alert('Please select a date and enter an event description!');\n      return;\n    }\n    const eventDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`;\n    const eventData = {\n      eventDate: eventDate,\n      eventName: newEvent.trim()\n    };\n\n    // Update events locally (frontend state)\n    setEvents(prevEvents => ({\n      ...prevEvents,\n      [eventDate]: [...(prevEvents[eventDate] || []), newEvent.trim()]\n    }));\n    setNewEvent(\"\"); // Clear input after adding event\n    setSelectedDay(null); // Close the form\n\n    const token = localStorage.getItem('token'); // Get token from localStorage\n    if (!token) {\n      console.log('No token found');\n      return;\n    }\n\n    // Send event data to the backend\n    try {\n      const response = await fetch('http://localhost:3000/addevent', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json' // Ensure backend recognizes JSON\n        },\n        body: JSON.stringify(eventData)\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Event added successfully!');\n      } else {\n        alert(data.message || 'Failed to add event.');\n      }\n    } catch (error) {\n      console.error('Error adding event:', error);\n      alert('Failed to add event.');\n    }\n  };\n  const handleDeleteEvent = eventIndex => {\n    const eventKey = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`;\n    setEvents(prevEvents => {\n      const updatedEvents = prevEvents[eventKey].filter((_, index) => index !== eventIndex);\n      if (updatedEvents.length > 0) {\n        return {\n          ...prevEvents,\n          [eventKey]: updatedEvents\n        };\n      } else {\n        const {\n          [eventKey]: deleted,\n          ...rest\n        } = prevEvents; // Remove the day if no events left\n        return rest;\n      }\n    });\n    setSelectedDay(null); // Close the form after deleting\n  };\n  const handleDeleteSlotEvent = eventIndex => {\n    if (selectedSlot) {\n      const eventKey = `${selectedSlot.date}-${selectedSlot.time}`;\n      setEvents(prevEvents => {\n        const updatedEvents = prevEvents[eventKey].filter((_, index) => index !== eventIndex);\n        if (updatedEvents.length > 0) {\n          return {\n            ...prevEvents,\n            [eventKey]: updatedEvents\n          };\n        } else {\n          const {\n            [eventKey]: deleted,\n            ...rest\n          } = prevEvents; // Remove the slot if no events are left\n          return rest;\n        }\n      });\n      setSelectedSlot(null); // Close the form after deleting\n    }\n  };\n  const handleClick = () => {\n    navigate('/year'); // Redirect to the Members page when button is clicked\n  };\n  const renderMonthView = () => {\n    const days = [];\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n    const totalDays = daysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n\n    // Render empty days before the first day of the month\n    for (let i = 0; i < firstDay; i++) {\n      days.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this));\n    }\n\n    // Render the actual days of the month\n    for (let i = 1; i <= totalDays; i++) {\n      const eventDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${i}`;\n      const isToday = new Date().getDate() === i && new Date().getMonth() === currentDate.getMonth();\n      days.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        className: `day ${isToday ? 'today' : ''}`,\n        onClick: () => setSelectedDay(i),\n        draggable: true,\n        onDragStart: e => {\n          // Set dragged event information\n          e.dataTransfer.setData(\"event\", eventDate);\n        },\n        onDrop: e => {\n          e.preventDefault();\n          // Handle drop event\n          const draggedEvent = e.dataTransfer.getData(\"event\");\n          const targetDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${i}`;\n          if (draggedEvent !== targetDate) {\n            // Move event to the new target date\n            setEvents(prevEvents => {\n              const newEvents = {\n                ...prevEvents\n              };\n              const event = prevEvents[draggedEvent] && prevEvents[draggedEvent][0]; // Get first event from the dragged date\n              if (event) {\n                // Remove event from the dragged date\n                newEvents[draggedEvent] = newEvents[draggedEvent].filter(ev => ev !== event);\n\n                // Add event to the new date\n                newEvents[targetDate] = [...(newEvents[targetDate] || []), event];\n              }\n              return newEvents;\n            });\n          }\n        },\n        onDragOver: e => {\n          e.preventDefault(); // Allow the drop\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), events[eventDate] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-bar\",\n          draggable: true,\n          onDragStart: e => {\n            e.dataTransfer.setData(\"event\", eventDate);\n          },\n          onDrop: e => {\n            e.preventDefault();\n            const draggedEvent = e.dataTransfer.getData(\"event\");\n            const targetDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${i}`;\n            if (draggedEvent !== targetDate) {\n              setEvents(prevEvents => {\n                const newEvents = {\n                  ...prevEvents\n                };\n                const event = prevEvents[draggedEvent] && prevEvents[draggedEvent][0];\n                if (event) {\n                  newEvents[targetDate] = [...(newEvents[targetDate] || []), event];\n                }\n                return newEvents;\n              });\n            }\n          },\n          onDragOver: e => {\n            e.preventDefault();\n          },\n          children: events[eventDate].map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-name\",\n            children: event\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Fill the rest of the week (if necessary)\n    const totalCells = days.length + (7 - days.length % 7) % 7;\n    const rows = [];\n    for (let i = 0; i < totalCells; i += 7) {\n      rows.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: days.slice(i, i + 7)\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n  const renderWeekView = () => {\n    const startOfWeek = new Date(currentDate);\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\n    const weekDays = daysInWeek(startOfWeek);\n    const timeSlots = [];\n    for (let hour = 0; hour < 24; hour++) {\n      const formattedTime = `${hour === 0 ? 12 : hour > 12 ? hour - 12 : hour}:00 ${hour < 12 ? \"AM\" : \"PM\"}`;\n      timeSlots.push(formattedTime);\n    }\n    const handleDragStart = (e, eventKey) => {\n      e.dataTransfer.setData(\"eventKey\", eventKey); // Store the event's unique key (date-time)\n    };\n    const handleDrop = (e, targetDate, targetTime) => {\n      e.preventDefault();\n      const draggedEventKey = e.dataTransfer.getData(\"eventKey\"); // Get the dragged event's unique key\n      if (draggedEventKey) {\n        const draggedEvent = events[draggedEventKey][0]; // Get the event from the dragged key\n        if (draggedEvent) {\n          // Add the event to the new target date-time slot\n          setEvents(prevEvents => {\n            const newEvents = {\n              ...prevEvents\n            };\n            if (!newEvents[`${targetDate}-${targetTime}`]) {\n              newEvents[`${targetDate}-${targetTime}`] = [];\n            }\n            newEvents[`${targetDate}-${targetTime}`].push(draggedEvent);\n\n            // Remove the event from the original slot\n            const updatedEvents = prevEvents[draggedEventKey].filter(event => event !== draggedEvent);\n            if (updatedEvents.length > 0) {\n              newEvents[draggedEventKey] = updatedEvents;\n            } else {\n              const {\n                [draggedEventKey]: deleted,\n                ...rest\n              } = newEvents;\n              return rest;\n            }\n            return newEvents;\n          });\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"week-view-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this), weekDays.map(day => {\n              const isToday = day.getDate() === new Date().getDate() && day.getMonth() === new Date().getMonth();\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                className: isToday ? \"current-day\" : \"\",\n                children: day.toLocaleDateString(\"en-US\", {\n                  weekday: \"short\",\n                  month: \"short\",\n                  day: \"numeric\"\n                })\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Whole Day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 15\n            }, this), weekDays.map((day, index) => {\n              const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"extra-row\",\n                children: events[date] && events[date].map((event, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"event-name\",\n                  children: event\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 23\n                }, this))\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), timeSlots.map((time, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 17\n            }, this), weekDays.map(day => {\n              const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n              const eventKey = `${date}-${time}`;\n              const isSelected = selectedSlot && selectedSlot.date === date && selectedSlot.time === time;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `time-slot ${isSelected ? 'selected' : ''}`,\n                onClick: () => {\n                  setSelectedSlot(isSelected ? null : {\n                    date,\n                    time\n                  });\n                },\n                onDrop: e => handleDrop(e, date, time) // Handle drop on time slot\n                ,\n                onDragOver: e => e.preventDefault() // Allow drop\n                ,\n                children: events[eventKey] && events[eventKey].map((event, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"event-bar\",\n                  draggable: true,\n                  onDragStart: e => handleDragStart(e, eventKey) // Start drag for the event\n                  ,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"event-name\",\n                    children: event\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 29\n                  }, this)\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 27\n                }, this))\n              }, eventKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 21\n              }, this);\n            })]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this);\n  };\n  const renderAgendaView = () => {\n    const startOfWeek = new Date(currentDate);\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\n    const weekDates = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(startOfWeek.getDate() + i);\n      weekDates.push(date);\n    }\n\n    // Create a list of time slots, but only include those with events.\n    const timeSlots = [];\n    for (let hour = 0; hour < 24; hour++) {\n      const formattedTime = `${hour === 0 ? 12 : hour > 12 ? hour - 12 : hour}:00 ${hour < 12 ? \"AM\" : \"PM\"}`;\n\n      // Check if any events exist for this time slot on any day\n      const hasEvents = weekDates.some(day => {\n        const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n        const eventKey = `${date}-${formattedTime}`;\n        return events[eventKey] && events[eventKey].length > 0;\n      });\n\n      // If events exist for this time slot, include it in the list\n      if (hasEvents) {\n        timeSlots.push(formattedTime);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"agenda-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this), weekDates.map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: day.toLocaleDateString(\"en-US\", {\n                weekday: \"short\",\n                month: \"short\",\n                day: \"numeric\"\n              })\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Whole Day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 15\n            }, this), weekDates.map((day, index) => {\n              const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"extra-row\",\n                children: events[date] && events[date].map((event, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"event-name\",\n                  children: event\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 23\n                }, this))\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 11\n          }, this), timeSlots.map((time, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this), weekDates.map((day, dayIndex) => {\n              const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n              const eventKey = `${date}-${time}`;\n              const eventsForTime = events[eventKey] || [];\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: eventsForTime.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"events-list\",\n                  children: eventsForTime.map((event, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"event-name\",\n                    children: event\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 493,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 25\n                }, this)\n              }, dayIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 21\n              }, this);\n            })]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this);\n  };\n  const handleViewChange = viewType => {\n    setView(viewType);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: () => changeMonth(-1),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: () => changeMonth(1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: handleTodayClick,\n          children: \"Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"span1\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [getMonthName(currentDate.getMonth()), \" \", currentDate.getFullYear()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"span2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: () => handleViewChange(\"month\"),\n          children: \"Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: () => handleViewChange(\"week\"),\n          children: \"Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: () => handleViewChange(\"agenda\"),\n          children: \"Agenda\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn1\",\n          onClick: handleClick,\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [view === \"month\" && /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sun\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Mon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Tue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Wed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Thu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Fri\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 7\n        }, this), view === \"month\" && renderMonthView()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [view === \"week\" && renderWeekView(), view === \"agenda\" && renderAgendaView()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this), selectedSlot && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Events for \", selectedSlot.date, \" at \", selectedSlot.time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newEvent,\n        onChange: e => setNewEvent(e.target.value),\n        placeholder: \"Enter event description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add\",\n          onClick: handleAddEvent1,\n          children: \"Add Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel\",\n          onClick: () => setSelectedSlot(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 11\n      }, this), events[`${selectedSlot.date}-${selectedSlot.time}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-events\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Existing Events:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: events[`${selectedSlot.date}-${selectedSlot.time}`].map((event, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"event-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteSlotEvent(index),\n              className: \"delete-btn\",\n              \"aria-label\": \"Delete event\",\n              children: [/*#__PURE__*/_jsxDEV(FaTrashAlt, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 592,\n                columnNumber: 13\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"event\",\n              children: event\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 11\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }, this), selectedDay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Events for \", selectedDay, \" \", getMonthName(currentDate.getMonth()), \" \", currentDate.getFullYear()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newEvent,\n        onChange: e => setNewEvent(e.target.value),\n        placeholder: \"Enter event description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add\",\n          onClick: handleAddEvent,\n          children: \"Add Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel\",\n          onClick: () => setSelectedDay(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 11\n      }, this), events[`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-events\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Existing Events:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: events[`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`].map((event, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"event-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteEvent(index),\n              className: \"delete-btn\",\n              \"aria-label\": \"Delete event\",\n              children: [/*#__PURE__*/_jsxDEV(FaTrashAlt, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 20\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 18\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"event\",\n              children: event\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 18\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 18\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 518,\n    columnNumber: 5\n  }, this);\n};\n_s(EmCalendar, \"ItxraSRAh6Z3j/Td4sfi6hM/A54=\", false, function () {\n  return [useNavigate];\n});\n_c = EmCalendar;\nexport default EmCalendar;\nvar _c;\n$RefreshReg$(_c, \"EmCalendar\");","map":{"version":3,"names":["React","useState","useEffect","FaTrashAlt","useNavigate","jsxDEV","_jsxDEV","EmCalendar","_s","currentDate","setCurrentDate","Date","events","setEvents","selectedDay","setSelectedDay","newEvent","setNewEvent","view","setView","selectedSlot","setSelectedSlot","navigate","fetchEvents","token","localStorage","getItem","console","log","response","fetch","headers","Authorization","data","json","status","formattedEvents","forEach","event","eventDate","eventName","formattedDate","toISOString","split","error","getMonthName","monthIndex","months","daysInMonth","month","year","getDate","daysInWeek","startOfWeek","days","i","day","setDate","push","changeMonth","direction","newDate","getFullYear","getMonth","handleTodayClick","handleAddEvent1","trim","eventKey","date","time","prevEvents","handleAddEvent","alert","eventData","method","body","JSON","stringify","message","handleDeleteEvent","eventIndex","updatedEvents","filter","_","index","length","deleted","rest","handleDeleteSlotEvent","handleClick","renderMonthView","firstDay","getDay","totalDays","className","fileName","_jsxFileName","lineNumber","columnNumber","isToday","onClick","draggable","onDragStart","e","dataTransfer","setData","onDrop","preventDefault","draggedEvent","getData","targetDate","newEvents","ev","onDragOver","children","map","totalCells","rows","slice","renderWeekView","weekDays","timeSlots","hour","formattedTime","handleDragStart","handleDrop","targetTime","draggedEventKey","toLocaleDateString","weekday","idx","isSelected","renderAgendaView","weekDates","hasEvents","some","dayIndex","eventsForTime","handleViewChange","viewType","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/CodeRelix Internship Nov 2024/PulseFit/frontend/src/components/EmCalendar/EmCalendar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FaTrashAlt } from 'react-icons/fa';  // Import the trash icon\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\nimport './EmCalendar.css';\n\nconst EmCalendar = () => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState({}); // Store events with date and time\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [newEvent, setNewEvent] = useState(\"\");\n  const [view, setView] = useState(\"month\"); // State to track the current view (month, week, agenda)\n  const [selectedSlot, setSelectedSlot] = useState(null); // For week view time slots\n  \n  const navigate = useNavigate();\n  \n\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const token = localStorage.getItem('token');  // Get token from localStorage\n      if (!token) {\n        console.log('No token found');\n        return;\n      }\n    \n      try {\n        const response = await fetch('http://localhost:3000/eventsforemployees', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n    \n        const data = await response.json();\n        console.log('API Response:', data);  // Log the full response\n        \n    \n        if (data.status === 'SUCCESS') {\n          const formattedEvents = {};\n          data.events.forEach(event => {\n            const { eventDate, eventName } = event;\n            const formattedDate = new Date(eventDate).toISOString().split('T')[0]; // 'YYYY-MM-DD'\n            formattedEvents[formattedDate] = [\n              ...(formattedEvents[formattedDate] || []),\n              eventName\n            ];\n          });\n          \n          console.log('Formatted Events:', formattedEvents);  // Log the formatted events\n          setEvents(formattedEvents); // Store in state\n        } else {\n          console.log('API status is not SUCCESS:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n    \n    fetchEvents();\n  }, []); // Runs once when component mounts\n\n  \n\n\n  const getMonthName = (monthIndex) => {\n    const months = [\n      \"January\", \"February\", \"March\", \"April\", \"May\", \n      \"June\", \"July\", \"August\", \"September\", \"October\", \n      \"November\", \"December\"\n    ];\n    return months[monthIndex];\n  };\n\n  const daysInMonth = (month, year) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n\n  // Function to get days for the week view\n  const daysInWeek = (startOfWeek) => {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(startOfWeek);\n      day.setDate(startOfWeek.getDate() + i);\n      days.push(day);\n    }\n    return days;\n  };\n\n  const changeMonth = (direction) => {\n    const newDate = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth() + direction,\n      1\n    );\n    setCurrentDate(newDate);\n  };\n\n  const handleTodayClick = () => {\n    setCurrentDate(new Date()); // Reset to today's date\n    setSelectedDay(new Date().getDate()); // Set today's date as selected\n  };\n\n  const handleAddEvent1 = () => {\n    if (newEvent.trim() && selectedSlot) {\n      const eventKey = `${selectedSlot.date}-${selectedSlot.time}`; // Use both date and time\n      setEvents((prevEvents) => ({\n        ...prevEvents,\n        [eventKey]: [...(prevEvents[eventKey] || []), newEvent], // Store events at the specific time slot\n      }));\n      setNewEvent(\"\"); // Clear input after adding event\n      setSelectedSlot(null); // Close the form\n    }\n  };\n\n\n  const handleAddEvent = async () => {\n    if (!selectedDay || !newEvent.trim()) {\n      alert('Please select a date and enter an event description!');\n      return;\n    }\n  \n    const eventDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`;\n    const eventData = {\n      eventDate: eventDate,\n      eventName: newEvent.trim(),\n    };\n  \n    // Update events locally (frontend state)\n    setEvents((prevEvents) => ({\n      ...prevEvents,\n      [eventDate]: [...(prevEvents[eventDate] || []), newEvent.trim()],\n    }));\n  \n    setNewEvent(\"\"); // Clear input after adding event\n    setSelectedDay(null); // Close the form\n  \n    const token = localStorage.getItem('token');  // Get token from localStorage\n    if (!token) {\n      console.log('No token found');\n      return;\n    }\n  \n    // Send event data to the backend\n    try {\n      const response = await fetch('http://localhost:3000/addevent', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json', // Ensure backend recognizes JSON\n        },\n        body: JSON.stringify(eventData),\n      });\n  \n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Event added successfully!');\n      } else {\n        alert(data.message || 'Failed to add event.');\n      }\n    } catch (error) {\n      console.error('Error adding event:', error);\n      alert('Failed to add event.');\n    }\n  };\n    const handleDeleteEvent = (eventIndex) => {\n    const eventKey = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`;\n    setEvents((prevEvents) => {\n      const updatedEvents = prevEvents[eventKey].filter((_, index) => index !== eventIndex);\n      if (updatedEvents.length > 0) {\n        return { ...prevEvents, [eventKey]: updatedEvents };\n      } else {\n        const { [eventKey]: deleted, ...rest } = prevEvents; // Remove the day if no events left\n        return rest;\n      }\n    });\n    setSelectedDay(null); // Close the form after deleting\n  };\n\n  const handleDeleteSlotEvent = (eventIndex) => {\n    if (selectedSlot) {\n      const eventKey = `${selectedSlot.date}-${selectedSlot.time}`;\n      setEvents((prevEvents) => {\n        const updatedEvents = prevEvents[eventKey].filter((_, index) => index !== eventIndex);\n        if (updatedEvents.length > 0) {\n          return { ...prevEvents, [eventKey]: updatedEvents };\n        } else {\n          const { [eventKey]: deleted, ...rest } = prevEvents; // Remove the slot if no events are left\n          return rest;\n        }\n      });\n      setSelectedSlot(null); // Close the form after deleting\n    }\n  };\n\n\n  const handleClick = () => {\n    navigate('/year'); // Redirect to the Members page when button is clicked\n  };\n  \n  \n  const renderMonthView = () => {\n    const days = [];\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n    const totalDays = daysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n  \n    // Render empty days before the first day of the month\n    for (let i = 0; i < firstDay; i++) {\n      days.push(<td className=\"empty\" key={`empty-${i}`} />);\n    }\n  \n    // Render the actual days of the month\n    for (let i = 1; i <= totalDays; i++) {\n      const eventDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${i}`;\n      const isToday = new Date().getDate() === i && new Date().getMonth() === currentDate.getMonth();\n      days.push(\n        <td \n          className={`day ${isToday ? 'today' : ''}`} \n          key={i} \n          onClick={() => setSelectedDay(i)}\n          draggable\n          onDragStart={(e) => {\n            // Set dragged event information\n            e.dataTransfer.setData(\"event\", eventDate);\n          }}\n          onDrop={(e) => {\n            e.preventDefault();\n            // Handle drop event\n            const draggedEvent = e.dataTransfer.getData(\"event\");\n            const targetDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${i}`;\n            if (draggedEvent !== targetDate) {\n              // Move event to the new target date\n              setEvents((prevEvents) => {\n                const newEvents = { ...prevEvents };\n                const event = prevEvents[draggedEvent] && prevEvents[draggedEvent][0]; // Get first event from the dragged date\n                if (event) {\n                  // Remove event from the dragged date\n                  newEvents[draggedEvent] = newEvents[draggedEvent].filter(ev => ev !== event);\n\n                  // Add event to the new date\n                  newEvents[targetDate] = [...(newEvents[targetDate] || []), event];\n                }\n                return newEvents;\n              });\n            }\n          }}\n          onDragOver={(e) => {\n            e.preventDefault(); // Allow the drop\n          }}\n        >\n          <span>{i}</span>\n          {/* Display event names inside separate bars */}\n          {events[eventDate] && (\n            <div\n              className=\"event-bar\"\n              draggable\n              onDragStart={(e) => {\n                e.dataTransfer.setData(\"event\", eventDate);\n              }}\n              onDrop={(e) => {\n                e.preventDefault();\n                const draggedEvent = e.dataTransfer.getData(\"event\");\n                const targetDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${i}`;\n                if (draggedEvent !== targetDate) {\n                  setEvents((prevEvents) => {\n                    const newEvents = { ...prevEvents };\n                    const event = prevEvents[draggedEvent] && prevEvents[draggedEvent][0];\n                    if (event) {\n                      newEvents[targetDate] = [...(newEvents[targetDate] || []), event];\n                    }\n                    return newEvents;\n                  });\n                }\n              }}\n              onDragOver={(e) => {\n                e.preventDefault();\n              }}\n            >\n              {events[eventDate].map((event, index) => (\n                <div key={index} className=\"event-name\">{event}</div>\n              ))}\n            </div>\n          )}\n        </td>\n      );\n    }\n  \n    // Fill the rest of the week (if necessary)\n    const totalCells = days.length + (7 - (days.length % 7)) % 7;\n    const rows = [];\n    for (let i = 0; i < totalCells; i += 7) {\n      rows.push(\n        <tr key={`row-${i}`}>\n          {days.slice(i, i + 7)}\n        </tr>\n      );\n    }\n  \n    return rows;\n  };\n  \n\n  const renderWeekView = () => {\n    const startOfWeek = new Date(currentDate);\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\n    const weekDays = daysInWeek(startOfWeek);\n  \n    const timeSlots = [];\n    for (let hour = 0; hour < 24; hour++) {\n      const formattedTime = `${hour === 0 ? 12 : hour > 12 ? hour - 12 : hour}:00 ${hour < 12 ? \"AM\" : \"PM\"}`;\n      timeSlots.push(formattedTime);\n    }\n  \n    const handleDragStart = (e, eventKey) => {\n      e.dataTransfer.setData(\"eventKey\", eventKey);  // Store the event's unique key (date-time)\n    };\n  \n    const handleDrop = (e, targetDate, targetTime) => {\n      e.preventDefault();\n      const draggedEventKey = e.dataTransfer.getData(\"eventKey\");  // Get the dragged event's unique key\n      if (draggedEventKey) {\n        const draggedEvent = events[draggedEventKey][0];  // Get the event from the dragged key\n        if (draggedEvent) {\n          // Add the event to the new target date-time slot\n          setEvents((prevEvents) => {\n            const newEvents = { ...prevEvents };\n            if (!newEvents[`${targetDate}-${targetTime}`]) {\n              newEvents[`${targetDate}-${targetTime}`] = [];\n            }\n            newEvents[`${targetDate}-${targetTime}`].push(draggedEvent);\n  \n            // Remove the event from the original slot\n            const updatedEvents = prevEvents[draggedEventKey].filter(\n              (event) => event !== draggedEvent\n            );\n            if (updatedEvents.length > 0) {\n              newEvents[draggedEventKey] = updatedEvents;\n            } else {\n              const { [draggedEventKey]: deleted, ...rest } = newEvents;\n              return rest;\n            }\n            return newEvents;\n          });\n        }\n      }\n    };\n  \n    return (\n      <div>\n        <table className=\"week-view-table\">\n          <thead>\n            <tr>\n              <th>Time</th>\n              {weekDays.map((day) => {\n                const isToday = day.getDate() === new Date().getDate() && day.getMonth() === new Date().getMonth();\n                return (\n                  <th key={day} className={isToday ? \"current-day\" : \"\"}>\n                    {day.toLocaleDateString(\"en-US\", {\n                      weekday: \"short\",\n                      month: \"short\",\n                      day: \"numeric\",\n                    })}\n                  </th>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {/* Extra row above 12:00 AM */}\n            <tr>\n              <td>Whole Day</td>\n              {weekDays.map((day, index) => {\n                const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n                return (\n                  <td key={index} className=\"extra-row\">\n                    {/* Display events for the day in the extra row */}\n                    {events[date] && events[date].map((event, idx) => (\n                      <div key={idx} className=\"event-name\">{event}</div>\n                    ))}\n                  </td>\n                );\n              })}\n            </tr>\n  \n            {timeSlots.map((time, index) => (\n              <tr key={index}>\n                <td>{time}</td>\n                {weekDays.map((day) => {\n                  const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n                  const eventKey = `${date}-${time}`;\n                  const isSelected = selectedSlot && selectedSlot.date === date && selectedSlot.time === time;\n  \n                  return (\n                    <td\n                      key={eventKey}\n                      className={`time-slot ${isSelected ? 'selected' : ''}`}\n                      onClick={() => {\n                        setSelectedSlot(isSelected ? null : { date, time });\n                      }}\n                      onDrop={(e) => handleDrop(e, date, time)}  // Handle drop on time slot\n                      onDragOver={(e) => e.preventDefault()}  // Allow drop\n                    >\n                      {/* Event bars inside time slots */}\n                      {events[eventKey] &&\n                        events[eventKey].map((event, idx) => (\n                          <div\n                            key={idx}\n                            className=\"event-bar\"\n                            draggable\n                            onDragStart={(e) => handleDragStart(e, eventKey)}  // Start drag for the event\n                          >\n                            <div className=\"event-name\">{event}</div>\n                          </div>\n                        ))}\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n  \n  const renderAgendaView = () => {\n    const startOfWeek = new Date(currentDate);\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\n    const weekDates = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(startOfWeek.getDate() + i);\n      weekDates.push(date);\n    }\n  \n    // Create a list of time slots, but only include those with events.\n    const timeSlots = [];\n    for (let hour = 0; hour < 24; hour++) {\n      const formattedTime = `${hour === 0 ? 12 : hour > 12 ? hour - 12 : hour}:00 ${hour < 12 ? \"AM\" : \"PM\"}`;\n      \n      // Check if any events exist for this time slot on any day\n      const hasEvents = weekDates.some(day => {\n        const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n        const eventKey = `${date}-${formattedTime}`;\n        return events[eventKey] && events[eventKey].length > 0;\n      });\n  \n      // If events exist for this time slot, include it in the list\n      if (hasEvents) {\n        timeSlots.push(formattedTime);\n      }\n    }\n  \n    return (\n      <div>\n        <table className=\"agenda-table\">\n          <thead>\n            <tr>\n              <th>Time</th>\n              {weekDates.map((day, index) => (\n                <th key={index}>\n                  {day.toLocaleDateString(\"en-US\", { weekday: \"short\", month: \"short\", day: \"numeric\" })}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n          <tr>\n              <td>Whole Day</td>\n              {weekDates.map((day, index) => {\n                const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n                return (\n                  <td key={index} className=\"extra-row\">\n                    {/* Display events for the day in the extra row */}\n                    {events[date] && events[date].map((event, idx) => (\n                      <div key={idx} className=\"event-name\">{event}</div>\n                    ))}\n                  </td>\n                );\n              })}\n            </tr>\n            {timeSlots.map((time, index) => (\n              <tr key={index}>\n                <td>{time}</td>\n                {weekDates.map((day, dayIndex) => {\n                  const date = `${day.getFullYear()}-${day.getMonth() + 1}-${day.getDate()}`;\n                  const eventKey = `${date}-${time}`;\n                  const eventsForTime = events[eventKey] || [];\n  \n                  return (\n                    <td key={dayIndex}>\n                      {eventsForTime.length > 0 ? (\n                        <div className=\"events-list\">\n                          {eventsForTime.map((event, idx) => (\n                            <div key={idx} className=\"event-name\">\n                              {event}\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <span></span>\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n\n  const handleViewChange = (viewType) => {\n    setView(viewType);\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <div className=\"view-buttons\">\n        <div>\n          <button className=\"btn1\" onClick={() => changeMonth(-1)}>{\"Back\"}</button>\n          <button className=\"btn1\" onClick={() => changeMonth(1)}>{\"Next\"}</button>\n          <button className=\"btn1\" onClick={handleTodayClick}>Today</button>\n        </div>\n        <span className=\"span1\"><h2>\n          {getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}\n        </h2>\n        </span>\n        <span className=\"span2\">\n          <button className=\"btn1\" onClick={() => handleViewChange(\"month\")}>Month</button>\n          <button className=\"btn1\" onClick={() => handleViewChange(\"week\")}>Week</button>\n          <button className=\"btn1\" onClick={() => handleViewChange(\"agenda\")}>Agenda</button>\n\n          <button className=\"btn1\" onClick={handleClick}>Year</button>\n\n        </span>\n      </div>\n\n      <div className=\"calendar-view\">\n  <div>\n    {view === \"month\" && (\n      <thead>\n        <tr>\n          <th>Sun</th>\n          <th>Mon</th>\n          <th>Tue</th>\n          <th>Wed</th>\n          <th>Thu</th>\n          <th>Fri</th>\n          <th>Sat</th>\n        </tr>\n      </thead>\n    )}\n    {view === \"month\" && renderMonthView()}\n  </div>\n  <div>\n    {view === \"week\" && renderWeekView()}\n    {/* {view === \"year\" && renderYearView()} */}\n\n    {view === \"agenda\" && renderAgendaView()}\n  </div>\n</div>\n\n\n      {selectedSlot && (\n        <div className=\"event-form\">\n          <h3>\n            Events for {selectedSlot.date} at {selectedSlot.time}\n          </h3>\n          <textarea\n            value={newEvent}\n            onChange={(e) => setNewEvent(e.target.value)}\n            placeholder=\"Enter event description\"\n          />\n          <div className=\"button-group\">\n            <button className=\"add\" onClick={handleAddEvent1}>Add Event</button>\n            <button className=\"cancel\" onClick={() => setSelectedSlot(null)}>Cancel</button>\n          </div>\n\n          {/* Display and delete existing events */}\n          {events[`${selectedSlot.date}-${selectedSlot.time}`] && (\n  <div className=\"existing-events\">\n    <h4>Existing Events:</h4>\n    <ul>\n      {events[`${selectedSlot.date}-${selectedSlot.time}`].map((event, index) => (\n        <li key={index} className=\"event-item\">\n          <button \n            onClick={() => handleDeleteSlotEvent(index)} \n            className=\"delete-btn\"\n            aria-label=\"Delete event\"\n          >\n            <FaTrashAlt /> {/* React Icon bin icon */}\n          </button>\n          <span className=\"event\">{event}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n)}\n        </div>\n      )}\n\n      {selectedDay && (\n        <div className=\"event-form\">\n          <h3>\n            Events for {selectedDay}{\" \"}\n            {getMonthName(currentDate.getMonth())}{\" \"}\n            {currentDate.getFullYear()}\n          </h3>\n          <textarea\n            value={newEvent}\n            onChange={(e) => setNewEvent(e.target.value)}\n            placeholder=\"Enter event description\"\n          />\n          <div className=\"button-group\">\n            <button className=\"add\" onClick={handleAddEvent}>Add Event</button>\n            <button className=\"cancel\" onClick={() => setSelectedDay(null)}>Cancel</button>\n          </div>\n\n          {/* Display and delete existing events */}\n          {events[`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`] && (\n            <div className=\"existing-events\">\n              <h4>Existing Events:</h4>\n              <ul>\n                {events[`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${selectedDay}`].map((event, index) => (\n                 <li key={index} className=\"event-item\">\n                 <button \n                   onClick={() => handleDeleteEvent(index)} \n                   className=\"delete-btn\"\n                   aria-label=\"Delete event\"\n                 >\n                   <FaTrashAlt /> {/* React Icon bin icon */}\n                 </button>\n                 <span className=\"event\">{event}</span>\n               </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmCalendar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}